plugins {
    id "idea"
    id "eclipse"
    id "maven-publish"
    id "net.minecraftforge.gradle" version "6.0.+"
    id "org.parchmentmc.librarian.forgegradle" version "1.+"
    id "dev.ithundxr.silk" version "0.11.15"
    id "net.kyori.blossom" version "2.1.0"
    id "io.freefair.lombok" version "8.11"
}

apply from: "./gradle/java.gradle"
apply from: "gradle/property_loader.gradle"

String gitHash = "${calculateGitHash() + (hasUnstaged() ? "-modified" : "")}"

version = project.mod_version + "-forge-mc" + project.minecraft_version
group = project.maven_group
archivesBaseName = project.mod_id

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

minecraft {
    mappings channel: 'parchment', version: "${parchment_version}-${minecraft_version}"

    if (file('src/main/resources/META-INF/accesstransformer.cfg').exists()) {
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    }

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                chemica {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run/server')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                chemica {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run/data')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                chemica {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main {
    resources {
        srcDir 'src/generated/resources'
        exclude '.cache/'
    }

    blossom.javaSources {
        property("version", mod_version)
        property("gitCommit", gitHash.toString())
    }
}

repositories {
    maven { url = "https://maven.createmod.net" }
    maven { url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/" }
    maven { url = "https://maven.tterrag.com" }
    maven { url = "https://maven.blamejared.com" }
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }
    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/"
    }
    mavenLocal()
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    implementation 'org.jetbrains:annotations:22.0.0'

    implementation fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}")

    // Mixin Extras - use regular implementation instead of jarJar for now
    implementation fg.deobf("io.github.llamalad7:mixinextras-forge:${mixin_extras_version}")

    implementation fg.deobf("com.simibubi.create:create-${minecraft_version}:${create_version}:slim") { transitive = false }
    compileOnly fg.deobf("dev.engine-room.flywheel:flywheel-forge-api-${minecraft_version}:${flywheel_version}")
    runtimeOnly fg.deobf("dev.engine-room.flywheel:flywheel-forge-${minecraft_version}:${flywheel_version}")

    implementation fg.deobf("net.createmod.ponder:Ponder-Forge-${minecraft_version}:${ponder_version}")

    // Mixin annotation processor
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")

    compileOnly fg.deobf("maven.modrinth:emi:${emi_version}")

    implementation fg.deobf("maven.modrinth:create-tfmg:${tfmg_version}")
}

// Remove the mixin() block and replace with this:
def refmap = "chemica.refmap.json"

compileJava.options.encoding = 'UTF-8'

processResources {
    def buildProps = project.properties.clone()
    buildProps.put('file', [jarVersion: project.version])

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand buildProps
    }
}

compileJava {
    options.compilerArgs = ['-Xdiags:verbose']
}

jar {
    manifest {
        attributes([
                "MixinConfigs": "chemica.mixins.json",
                "MixinConnector": "io.github.cosmads.chemica.core.ChemicaMixinConnector",
                "Git-Hash": gitHash
        ])
    }
}

tasks.named("sourcesJar") {
    manifest.attributes(["Git-Hash": gitHash])
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs += ['-Xmaxerrs', '1000']
}

String calculateGitHash() {
    try {
        def output = providers.exec {
            commandLine("git", "rev-parse", "HEAD")
        }
        return output.standardOutput.asText.get().trim()
    } catch (Throwable ignored) {
        return "unknown"
    }
}

boolean hasUnstaged() {
    try {
        def output = providers.exec {
            commandLine("git", "status", "--porcelain")
        }
        String result = output.standardOutput.asText.get().replace("/M gradlew(\\.bat)?/", "").trim()
        if (!result.isEmpty())
            println("Found stageable results:\n ${result}\n")
        return !result.isEmpty()
    } catch (Throwable ignored) {
        return false
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}